
Generate all parentheses
easy
Time Limit: 2 sec
Memory Limit: 128000 kB
Problem Statement
Given an integer N, print all balanced bracket strings of length 2*N.
A bracket string is a string that contains only '(' and ')' as its characters.

Empty string is a balanced bracket string

If S is a balanced bracket string, so is (S)

If S and T are balanced bracket strings, so is ST


Print in lexicographical order. '(' appears before ')' in lexicographical order
Input
The single line of input containing an integer N.
1 <= N <= 15
Output
Print all possible balanced bracket string of length 2*N in a separate line.
Example
Sample Input 1:
1

Sample Output 1:
()

Sample Input 2:
3

Sample Output 2:
((()))
(()())
()(())
()()()

Explanation:
It is printed in lexicographical order .
import java.io.*;

import java.util.*;




 

class Main {

    public static ArrayList premutaionsB(ArrayList<String> arr, int n){

        if(n == 1)

            return arr;


 

        else{

            ArrayList<String> arr2 = new ArrayList<>();

            for(int i=0;i<arr.size();i++)

                arr2.add("(" + arr.get(i) + ")");


 

            for(int i=0;i<arr.size();i++)

                arr2.add("()" + arr.get(i));


 

            return premutaionsB(arr2, n-1);

        }

    }

    public static void main (String[] args) {

        Scanner sc = new Scanner(System.in);

        int n = sc.nextInt();

        ArrayList<String> arr = new ArrayList<>();

        arr.add("()");

        arr = premutaionsB(arr, n);

        for(int i=0;i<arr.size();i++)

            System.out.println(arr.get(i));

    }

}
