Ram and Sum (Contest)
easy
Time Limit: 2 sec
Memory Limit: 128000 kB
Problem Statement
Ram is given an array A of N integers. He was asked to perform the following operation, The operation goes like, Ram can choose atmost X number of distinct elements from the array. After choosing those elements he had to add them up and print the maximum sum he can achieve.
Input
The first line of the input contains an integer T denoting number of test cases.
For each test cases there will be two lines.
The first line will contain two space separated integers N and X.
The second line will contain the N space separated integers denoting array A.

Constraints
1 ≤ T ≤ 1000
1 ≤ X, N ≤ 105
-109 ≤ A[i] ≤ 109
Sum of N over all test cases will not exceed 2 x 106
Output
For each test case print single Integer denoting the maximum sum Ram can achieve.
Example
Sample Input
2
4 1
1 2 3 4
5 1
1 3 3 2 5

Sample Output
4
6

Explanation
For first test case we can choose 4 and maximise the sum.
For second test case we can choose two 3 as we have chosen only 1 distinct integer and maximise the result.

import java.io.*; 

import java.util.*; 

class Main {

    public static void main (String[] args) throws Exception {

        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));

        int t = Integer.parseInt(br.readLine().trim());

        while(t-->0){

            String[] s = br.readLine().split(" ");

            int n = Integer.parseInt(s[0]);

            int x = Integer.parseInt(s[1]);

            String[] input = br.readLine().split(" ");

            HashMap<Long, Integer> map = new HashMap<>();

            for(String sx : input){

                long y = Long.parseLong(sx);

                if(y>0) map.put(y,map.getOrDefault(y,0)+1);

            }

            PriorityQueue<Long> pq = new PriorityQueue<>(Collections.reverseOrder());

            for(long i:map.keySet()){

                pq.add(i*map.get(i));

            }

            long sum=0;

            for(int i = 0 ;i<x;i++){

                if(pq.isEmpty())

                   break;

                else sum += pq.poll();

            }

            System.out.println(sum);

        }

    }

}
